@use "sass:math";
@use "sass:color";

@function red_($color) {
  //noinspection CssInvalidFunction
  @return color.channel($color, "red", $space: rgb);
}

@function green_($color) {
  //noinspection CssInvalidFunction
  @return color.channel($color, "green", $space: rgb);
}

@function blue_($color) {
  //noinspection CssInvalidFunction
  @return color.channel($color, "blue", $space: rgb);
}

@function saturate_($color, $h) {
  @return color.scale($color, $saturation: $h * 1%);
}

@function adjust-hue_($color, $degrees) {
  @return color.adjust($color, $hue: $degrees * 1deg);
}

//--------------------------------
// Normal
//--------------------------------
@function blend-normal ($foreground, $background) {
  $opacity: opacity($foreground);
  $background-opacity: opacity($background);
  // calculate opacity
  $bm-red: red_($foreground) * $opacity + red_($background) * $background-opacity * (1 - $opacity);
  $bm-green: green_($foreground) * $opacity + green_($background) * $background-opacity * (1 - $opacity);
  $bm-blue: blue_($foreground) * $opacity + blue_($background) * $background-opacity * (1 - $opacity);
  @return rgb($bm-red, $bm-green, $bm-blue);
}

//--------------------------------
// Multiply
//--------------------------------
@function blend-multiply ($foreground, $background) {
  $bm-red: red_($background) * red_($foreground) / 255;
  $bm-green: green_($background) * green_($foreground) / 255;
  $bm-blue: blue_($background) * blue_($foreground) / 255;

  @return blend-normal(rgba($bm-red, $bm-green, $bm-blue, opacity($foreground)), $background);
}

//--------------------------------
// Lighten
//--------------------------------
@function blend-lighten ($foreground, $background) {
  $bm-red: blend-lighten-color(red_($foreground), red_($background));
  $bm-green: blend-lighten-color(green_($foreground), green_($background));
  $bm-blue: blend-lighten-color(blue_($foreground), blue_($background));

  @return blend-normal(rgba($bm-red, $bm-green, $bm-blue, opacity($foreground)), $background);
}

@function blend-lighten-color($foreground, $background) {
  @if $background > $foreground {
    $foreground: $background;
  }
  @return $foreground;
}

//--------------------------------
// Darken
//--------------------------------
@function blend-darken ($foreground, $background) {
  $bm-red: blend-darken-color(red_($foreground), red_($background));
  $bm-green: blend-darken-color(green_($foreground), green_($background));
  $bm-blue: blend-darken-color(blue_($foreground), blue_($background));

  @return blend-normal(rgba($bm-red, $bm-green, $bm-blue, opacity($foreground)), $background);
}

@function blend-darken-color($foreground, $background) {
  @if $background < $foreground {
    $foreground: $background;
  }
  @return $foreground;
}

//--------------------------------
// Darker Color
//--------------------------------
@function blend-darkercolor ($foreground, $background) {
  $bm-red: red_($foreground);
  $bm-green: green_($foreground);
  $bm-blue: blue_($foreground);
  $background-red: red_($background);
  $background-green: green_($background);
  $background-blue: blue_($background);

  @if $background-red * 0.3 + $background-green * 0.59 + $background-blue * 0.11 <= $bm-red * 0.3 + $bm-green * 0.59 + $bm-blue * 0.11 {
    $bm-red: $background-red;
    $bm-green: $background-green;
    $bm-blue: $background-blue;
  }
  @return blend-normal(rgba($bm-red, $bm-green, $bm-blue, opacity($foreground)), $background);
}

//--------------------------------
// Lighter Color
//--------------------------------
@function blend-lightercolor ($foreground, $background) {
  $bm-red: red_($foreground);
  $bm-green: green_($foreground);
  $bm-blue: blue_($foreground);
  $background-red: red_($background);
  $background-green: green_($background);
  $background-blue: blue_($background);

  @if $background-red * 0.3 + $background-green * 0.59 + $background-blue * 0.11 > $bm-red * 0.3 + $bm-green * 0.59 + $bm-blue * 0.11 {
    $bm-red: $background-red;
    $bm-green: $background-green;
    $bm-blue: $background-blue;
  }
  @return blend-normal(rgba($bm-red, $bm-green, $bm-blue, opacity($foreground)), $background);
}

//--------------------------------
// Linear Dodge
//--------------------------------
@function blend-lineardodge ($foreground, $background) {
  $bm-red: blend-lineardodge-color(red_($foreground), red_($background));
  $bm-green: blend-lineardodge-color(green_($foreground), green_($background));
  $bm-blue: blend-lineardodge-color(blue_($foreground), blue_($background));

  @return blend-normal(rgba($bm-red, $bm-green, $bm-blue, opacity($foreground)), $background);
}

@function blend-lineardodge-color($foreground, $background) {
  @if $background + $foreground > 255 {
    $foreground: 255;
  }
  @else {
    $foreground: $background + $foreground;
  }
  @return $foreground;
}

//--------------------------------
// Linear Burn
//--------------------------------
@function blend-linearburn ($foreground, $background) {
  $bm-red: blend-linearburn-color(red_($foreground), red_($background));
  $bm-green: blend-linearburn-color(green_($foreground), green_($background));
  $bm-blue: blend-linearburn-color(blue_($foreground), blue_($background));

  @return blend-normal(rgba($bm-red, $bm-green, $bm-blue, opacity($foreground)), $background);
}

@function blend-linearburn-color($foreground, $background) {
  @if $background + $foreground < 255 {
    $foreground: 0;
  }
  @else {
    $foreground: $background + $foreground - 255;
  }
  @return $foreground;
}

//--------------------------------
// Difference
//--------------------------------
@function blend-difference ($foreground, $background) {
  $bm-red: abs(red_($background) - red_($foreground));
  $bm-green: abs(green_($background) - green_($foreground));
  $bm-blue: abs(blue_($background) - blue_($foreground));

  @return blend-normal(rgba($bm-red, $bm-green, $bm-blue, opacity($foreground)), $background);
}

//--------------------------------
// Screen
//--------------------------------
@function blend-screen ($foreground, $background) {
  $bm-red: blend-screen-color(red_($foreground), red_($background));
  $bm-green: blend-screen-color(green_($foreground), green_($background));
  $bm-blue: blend-screen-color(blue_($foreground), blue_($background));

  @return blend-normal(rgba($bm-red, $bm-green, $bm-blue, opacity($foreground)), $background);
}

@function blend-screen-color($foreground, $background) {
  @return (255 - ( math.div(( (255 - $foreground) * (255 - $background)), 256)));
}

//--------------------------------
// Exclusion
//--------------------------------
@function blend-exclusion ($foreground, $background) {
  $bm-red: blend-exclusion-color(red_($foreground), red_($background));
  $bm-green: blend-exclusion-color(green_($foreground), green_($background));
  $bm-blue: blend-exclusion-color(blue_($foreground), blue_($background));

  @return blend-normal(rgba($bm-red, $bm-green, $bm-blue, opacity($foreground)), $background);
}

@function blend-exclusion-color($foreground, $background) {
  @return $background - ($background * (2 / 255) - 1) * $foreground;
}

//--------------------------------
// Overlay
//--------------------------------
@function blend-overlay ($foreground, $background) {
  $bm-red: blend-overlay-color(red_($foreground), red_($background));
  $bm-green: blend-overlay-color(green_($foreground), green_($background));
  $bm-blue: blend-overlay-color(blue_($foreground), blue_($background));

  @return blend-normal(rgba($bm-red, $bm-green, $bm-blue, opacity($foreground)), $background);
}

@function blend-overlay-color($foreground, $background) {
  @if $background <= 255 / 2 {
    $foreground: (2 * $background * $foreground) / 255;
  } @else {
    $foreground: 255 - (255 - 2 * ($background - (255 / 2))) * (255 - $foreground) / 255;
  }
  @return $foreground;
}

//--------------------------------
// Soft Light
//--------------------------------
@function blend-softlight ($foreground, $background) {
  $bm-red: blend-softlight-color(red_($foreground), red_($background));
  $bm-green: blend-softlight-color(green_($foreground), green_($background));
  $bm-blue: blend-softlight-color(blue_($foreground), blue_($background));

  @return blend-normal(rgba($bm-red, $bm-green, $bm-blue, opacity($foreground)), $background);
}

@function blend-softlight-color($foreground, $background) {
  @if $background < 128 {
    $foreground: (($foreground / 2) + 64) * $background * (2 / 255);
  } @else {
    $foreground: 255 - (191 - ($foreground / 2)) * (255 - $background) * (2 / 255);
  }
  @return $foreground;
}

//--------------------------------
// Hard Light
//--------------------------------
@function blend-hardlight ($foreground, $background) {
  $bm-red: blend-hardlight-color(red_($foreground), red_($background));
  $bm-green: blend-hardlight-color(green_($foreground), green_($background));
  $bm-blue: blend-hardlight-color(blue_($foreground), blue_($background));

  @return blend-normal(rgba($bm-red, $bm-green, $bm-blue, opacity($foreground)), $background);
}

@function blend-hardlight-color($foreground, $background) {
  $tmp-blend: $foreground;
  @if $tmp-blend < 128 {
    $foreground: $background * $tmp-blend * (2 / 255);
  } @else {
    $foreground: 255 - (255-$background) * (255-$tmp-blend) * (2 / 255);
  }
  @return $foreground;
}

//--------------------------------
// Color Dodge
//--------------------------------
@function blend-colordodge ($foreground, $background) {
  $bm-red: blend-colordodge-color(red_($foreground), red_($background));
  $bm-green: blend-colordodge-color(green_($foreground), green_($background));
  $bm-blue: blend-colordodge-color(blue_($foreground), blue_($background));

  @return blend-normal(rgba($bm-red, $bm-green, $bm-blue, opacity($foreground)), $background);
}

@function blend-colordodge-color($foreground, $background) {
  $tmp: $background * 256 / (255 - $foreground);
  @if $tmp > 255 or $foreground == 255 {
    $foreground: 255;
  } @else {
    $foreground: $tmp;
  }
  @return $foreground;
}

//--------------------------------
// Color Burn
//--------------------------------
@function blend-colorburn ($foreground, $background) {
  $bm-red: blend-colorburn-color(red_($foreground), red_($background));
  $bm-green: blend-colorburn-color(green_($foreground), green_($background));
  $bm-blue: blend-colorburn-color(blue_($foreground), blue_($background));

  @return blend-normal(rgba($bm-red, $bm-green, $bm-blue, opacity($foreground)), $background);
}

@function blend-colorburn-color($foreground, $background) {
  $tmp: (255 - ((255 - $background) * 255) / $foreground);

  // TODO: hacked to replicate photoshop
  @if $foreground == 0 {
    $foreground: 255;
  } @else if $tmp < 0 {
    $foreground: 0;
  } @else {
    $foreground: $tmp;
  }
  @return $foreground;
}

//--------------------------------
// Linear Light
//--------------------------------
@function blend-linearlight ($foreground, $background) {
  $bm-red: blend-linearlight-color(red_($foreground), red_($background));
  $bm-green: blend-linearlight-color(green_($foreground), green_($background));
  $bm-blue: blend-linearlight-color(blue_($foreground), blue_($background));

  @return blend-normal(rgba($bm-red, $bm-green, $bm-blue, opacity($foreground)), $background);
}

@function blend-linearlight-color($foreground, $background) {
  @if $foreground < 128 {
    $foreground: blend-linearburn-color($background, 2 * $foreground);
  } @else {
    $foreground: blend-lineardodge-color($background, 2 * ($foreground - 128));
  }
  @return $foreground;
}

//--------------------------------
// Vivid Light
//--------------------------------
@function blend-vividlight ($foreground, $background) {
  $bm-red: blend-vividlight-color(red_($foreground), red_($background));
  $bm-green: blend-vividlight-color(green_($foreground), green_($background));
  $bm-blue: blend-vividlight-color(blue_($foreground), blue_($background));

  @return blend-normal(rgba($bm-red, $bm-green, $bm-blue, opacity($foreground)), $background);
}

@function blend-vividlight-color($foreground, $background) {
  @if $foreground < 128 {
    $foreground: blend-colorburn-color(2 * $foreground, $background);
  } @else {
    $foreground: blend-colordodge-color(2 * ($foreground - 128), $background);
  }
  @return $foreground;
}

//--------------------------------
// Pin Light
//--------------------------------
@function blend-pinlight ($foreground, $background) {
  $bm-red:   blend-pinlight-color(red_($foreground), red_($background));
  $bm-green: blend-pinlight-color(green_($foreground), green_($background));
  $bm-blue:  blend-pinlight-color(blue_($foreground), blue_($background));

  @return blend-normal(rgba($bm-red, $bm-green, $bm-blue, opacity($foreground)), $background);
}

@function blend-pinlight-color($foreground, $background) {
  @if $foreground < 128 {
    $foreground: blend-darken-color($background, 2 * $foreground);
  } @else {
    $foreground: blend-lighten-color($background, 2 * ($foreground - 128));
  }
  @return $foreground;
}

//--------------------------------
// Hard Mix
//--------------------------------
@function blend-hardmix ($foreground, $background) {
  $bm-red: blend-hardmix-color(red_($foreground), red_($background));
  $bm-green: blend-hardmix-color(green_($foreground), green_($background));
  $bm-blue: blend-hardmix-color(blue_($foreground), blue_($background));

  @return blend-normal(rgba($bm-red, $bm-green, $bm-blue, opacity($foreground)), $background);
}

@function blend-hardmix-color($foreground, $background) {
  $tmp: blend-vividlight-color($foreground, $background);
  @if $tmp < 128 {
    $foreground: 0;
  } @else {
    $foreground: 255;
  }
  @return $foreground;
}


// Unique to Photoshop

//--------------------------------
// Color Blend
//--------------------------------
@function blend-colorblend ($foreground, $background) {
  $foreground-hsv: color-to-hsv($foreground);
  $background-hsv: color-to-hsv($background);

  $bm-hsv: nth($foreground-hsv, 1), nth($foreground-hsv, 2), nth($background-hsv, 3);
  $bm-color: hsv-to-color($bm-hsv);

  @return blend-normal(rgba(red_($bm-color), green_($bm-color), blue_($bm-color), opacity($foreground)), $background);
}

//--------------------------------
// Dissolve
//--------------------------------
@function blend-dissolve ($foreground, $background) {
  // The Dissolve blend mode acts on transparent and partially transparent pixels
  // it treats transparency as a pixel pattern and applies a diffusion dither pattern.
  // @see http://photoblogstop.com/photoshop/photoshop-blend-modes-explained
  @return $foreground;
}

//--------------------------------
// Divide
//--------------------------------
@function blend-divide ($foreground, $background) {
  $bm-red: blend-divide-colors(red_($foreground), red_($background));
  $bm-green: blend-divide-colors(green_($foreground), green_($background));
  $bm-blue:blend-divide-colors(blue_($foreground), blue_($background));

  @return blend-normal(rgba($bm-red, $bm-green, $bm-blue, opacity($foreground)), $background);
}

@function blend-divide-colors($foreground, $background) {
  @return min(((#{$background} / 255) / (#{$foreground} / 255)) * 255, 255);
}

//--------------------------------
// Hue
//--------------------------------
@function blend-hue ($foreground, $background) {
  $foreground-hsv: color-to-hsv($foreground);
  $background-hsv: color-to-hsv($background);

  $bm-hsv: nth($foreground-hsv, 1), nth($background-hsv, 2), nth($background-hsv, 3);
  $bm-color: hsv-to-color($bm-hsv);

  @return blend-normal(rgba(red_($bm-color), green_($bm-color), blue_($bm-color), opacity($foreground)), $background);
}

//--------------------------------
// Luminosity
//--------------------------------
@function blend-luminosity ($foreground, $background) {
  $foreground-hsv: color-to-hsv($foreground);
  $background-hsv: color-to-hsv($background);

  $bm-hsv: nth($background-hsv, 1), nth($background-hsv, 2), nth($foreground-hsv, 3);
  $bm-color: hsv-to-color($bm-hsv);

  @return blend-normal(rgba(red_($bm-color), green_($bm-color), blue_($bm-color), opacity($foreground)), $background);
}

//--------------------------------
// Saturation
//--------------------------------
@function blend-saturation ($foreground, $background) {
  $foreground-hsv: color-to-hsv($foreground);
  $background-hsv: color-to-hsv($background);

  $bm-hsv: nth($background-hsv, 1), nth($foreground-hsv, 2), nth($background-hsv, 3);
  $bm-color: hsv-to-color($bm-hsv);

  @return blend-normal(rgba(red_($bm-color), green_($bm-color), blue_($bm-color), opacity($foreground)), $background);
}

//--------------------------------
// Subtract
//--------------------------------
@function blend-subtract ($foreground, $background) {
  $bm-red: max(red_($background) - red_($foreground), 0);
  $bm-green: max(green_($background) - green_($foreground), 0);
  $bm-blue: max(blue_($background) - blue_($foreground), 0);

  @return blend-normal(rgba($bm-red, $bm-green, $bm-blue, opacity($foreground)), $background);
}

//--------------------------------
// HSL and HSV
//--------------------------------
// @see https://gist.github.com/1069204
@function hsv-to-hsl($h, $s: 0, $v: 0) {
  @if type-of($h) == 'list' {
    $v: nth($h, 3);
    $s: nth($h, 2);
    $h: nth($h, 1);
  }

  @if unit($h) == 'deg' {
    $h: 3.1415 * 2 * ($h / 360deg);
  }
  @if unit($s) == '%' {
    $s: 0 + ($s / 100%);
  }
  @if unit($v) == '%' {
    $v: 0 + ($v / 100%);
  }

  $ss: $s * $v;
  $ll: (2 - $s) * $v;

  @if $ll <= 1 and $ll != 0 {
    $ss: $ss / $ll;
  } @else if ($ll == 2) {
    $ss: 0;
  } @else {
    $ss: $ss / (2 - $ll);
  }

  $ll: $ll / 2;

  @return 360deg * $h / (3.1415 * 2), percentage(max(0, min(1, #{$ss}))), percentage(max(0, min(1, #{$ll})));
}

@function hsl-to-hsv($h, $ss: 0, $ll: 0) {
  @if type-of($h) == 'list' {
    $ll: nth($h, 3);
    $ss: nth($h, 2);
    $h: nth($h, 1);
  } @else if type-of($h) == 'color' {
    $ll: lightness($h);
    $ss: saturation($h);
    $h: hue($h);
  }

  @if unit($h) == 'deg' {
    $h: 3.1415 * 2 * ($h / 360deg);
  }
  @if unit($ss) == '%' {
    $ss: 0 + ($ss / 100%);
  }
  @if unit($ll) == '%' {
    $ll: 0 + ($ll / 100%);
  }

  $ll: $ll * 2;

  @if $ll <= 1 {
    $ss: $ss * $ll;
  } @else {
    $ss: $ss * (2 - $ll);
  }

  $v: ($ll + $ss) / 2;
  $s: if($ll + $ss == 0, 0, (2 * $ss) / ($ll + $ss));

  @return 360deg * $h / (3.1415 * 2), percentage(max(0, min(1, #{$s}))), percentage(max(0, min(1, #{$v})));
}

@function color-to-hsv($color) {
  @return hsl-to-hsv($color);
}

@function hsv-to-color($h, $s: 0, $v: 0) {
  $hsl: hsv-to-hsl($h, $s, $v);
  @return hsl(nth($hsl, 1), nth($hsl, 2), nth($hsl, 3));
}

//returns a value between 0 - 1
@function luma($c) {
	$-local-red: red_(rgba($c, 1.0));
	$-local-green: green_(rgba($c, 1.0));
	$-local-blue: blue_(rgba($c, 1.0));

	@return math.div((0.2126 * $-local-red  +
			 0.7152 * $-local-green +
			 0.0722 * $-local-blue), 255);
}

//noinspection CssInvalidFunction
@function make-shade($color, $mix-percentage, $saturation-shift, $hue-shift, $level){
	$divider: 1;
	$base: #000000;

	@if($level == 1 or $level == -1){
		$divider: 2;
	}

	@if($level < 0){
		$base: #ffffff;
	}

	$color-mix: mix($color, $base, $mix-percentage);
	$color-saturate: $color-mix;
	$color-hue: $hue-shift;

	@if(color.channel($color-mix, "saturation", $space: hsl) > 5){
		$color-saturate: saturate_($color-mix, math.div($saturation-shift, $divider))
	}

	@if($level < 0){
		@if(luma(adjust-hue_($color, $hue-shift)) > luma($color)){
			$color-hue: math.div($hue-shift, $divider);
		}@else{
			$color-hue: -(math.div($hue-shift, $divider));
		}
	} @else if($level > 0){
		@if(luma(adjust-hue_($color, $hue-shift)) > luma($color)){
			$color-hue: -(math.div($hue-shift, $divider));
		}@else{
			$color-hue: math.div($hue-shift, $divider);
		}
	}
	@return adjust-hue_($color-saturate, $color-hue);
}


// Legibility standards, WCAG 2.0 - Returns black or white text color
@function text-contrast($background-color) {
	//$color-brightness: round((red_($background-color) * 299) + (green_($background-color) * 587) + (blue_($background-color) * 114) / 1000);
	//$light-color: round((red_(#ffffff) * 299) + (green_(#ffffff) * 587) + (blue_(#ffffff) * 114) / 1000);
  $color-brightness: round(math.div(((red_($background-color) * 299) + (green_($background-color) * 587) + (blue_($background-color) * 114)), 1000));
	$light-color: round(math.div(((red_(#ffffff) * 299) + (green_(#ffffff) * 587) + (blue_(#ffffff) * 114)), 1000));
	@if abs($color-brightness) < math.div($light-color, 2){
	  @return $f-color-light;
	}
	@else {
	  @return $f-color-dark;
	}
}

// Checks if two colors are contrasting (Legibility standards, WCAG 2.0) - Returns true or false
@function contrast-checker($foreground, $background) {
	$r: (max(red_($foreground), red_($background))) - (min(red_($foreground), red_($background)));
	$g: (max(green_($foreground), green_($background))) - (min(green_($foreground), green_($background)));
	$b: (max(blue_($foreground), blue_($background))) - (min(blue_($foreground), blue_($background)));
	$sum-rgb: $r + $g + $b;

	@if $sum-rgb < 500 {
	  @return false;
	} @else {
	  @return true;
	 }
}

// Darkens or lightens a text color for Legibility standards
@function fix-contrast($text-color, $background: #ffffff){
	@if(luma($background) > 0.5){
		@while(contrast-checker($text-color, $background) == false) {
			$text-color: darken($text-color, 1%);
			@if(contrast-checker($text-color, $background)) {
				@return $text-color;
			}
		}
	}@else{
		@while(contrast-checker($text-color, $background) == false) {
			$text-color: lighten($text-color, 1%);
			@if(contrast-checker($text-color, $background)) {
				@return $text-color;
			}
		}
	}
	  @return $text-color;
}
